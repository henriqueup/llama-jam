Hey chat, I'd like you to help me write a product requirements document (PRD) for a system I want to build called "LlamaJam". I'll explain what the system is below, but I want you to feel free to ask me for any more additional information you may need.

LlamaJam is a library of songs represented in "tablature" notation (a simplified representation similar to sheet music). In it, users will be able to do mainly 2 things: write new tablatures or edit existing ones and playback existing songs. In order to do these things, there will need to be an editor, where tablatures are created and maintained, and a way to search for existing songs.

Songs will be constructed with a collection of tablatures or Sheets for different Instruments. For example there can be a song with 3 sheets: guitar, drums and bass. So there needs to also be a way for users to setup Instruments. Instruments can be of 2 types: melodic or percussion. And they'll have a concept of "tracks", which means how many channels from which that instrument can produce sound. E.g. a regular guitar has 6 strings or tracks, pianos and keyboards can have many keys, drum sets can have many parts.

A Sheet will always be associated to an Instrument and will represent the tracks of that Instrument along the Bars and beats of the Song. Each track will have Notes placed in them according to how they are played during the Song.

---------------------------------------------------------------------------------------------------------

Great! I’ve got the basics down. To help you craft a solid and complete PRD for **LlamaJam**, I’ll need a bit more detail in the following areas:

1. **Target Users and Use Cases**

   * Who is this system for? (e.g., beginner musicians, music teachers, advanced composers)
   * What key problems are you trying to solve for these users?

2. **Functional Requirements**

   * What specific features should the editor support? (e.g., drag-and-drop notes, keyboard input, instrument selection)
   * How should playback work? (e.g., MIDI synthesis, soundfonts, real-time playback with tempo control)
   * What kind of search functionality is required? (e.g., search by song name, tags, instrument, difficulty)

3. **Non-Functional Requirements**

   * Should it be a web app, desktop app, mobile app, or a combination?
   * Are there any performance, scalability, or accessibility concerns?

4. **Collaboration & Community**

   * Will users be able to share their songs or collaborate with others?
   * Should there be user accounts, ratings, comments, or version history?

5. **Data Storage & Format**

   * How should songs, instruments, and sheets be stored? (e.g., JSON, database schema)
   * Should there be import/export capabilities to standard music formats (e.g., MIDI, MusicXML)?

6. **Monetization / Business Goals (if any)**

   * Is this an open-source project, a commercial product, or a community tool?
   * Will there be premium features, ads, or subscriptions?

Once I have answers to some of these, I can draft a structured PRD with sections like Overview, Goals, User Stories, Functional & Non-functional Requirements, and more. Let’s go through them at your pace—just start with whichever areas you're ready to clarify!

---------------------------------------------------------------------------------------------------------

Great questions! Generally we'll be working on the MVP for now, so most of it might be changed in the future. Here are the answers:

1. The system is for anyone looking to learn how to play a song or that wants to follow along while playing. Also those that want to share song tablatures with others. Mainly that'd include beginners and amateur musicians.
2a. The editor will support switching between the Song's Instrument Sheets and in each the user should be able to configure the Bars and then add Notes. Adding Notes will be possible by either dragging and dropping, using keyboard shortcuts or copying and pasting. A Note should have a pitch and duration, as well as its starting point on a Bar.
2b. The playback will be synthetic and built using the Browser's WebAudio API. It should support starting and pausing, as well as seeking to a specific point with a click or skipping bars.
2c. Searching in the MVP will be simplified to only the Song title, artist and difficulty.
3. It will be a web app, using the TanStack Start framework. We can get into more technical details later. Scalability and accessibility will not be major concerns during the MVP. Performance is the main concern as far as rendering and playing back the Sheets on the browser.
4. In the MVP all Songs will be public. There will only be a generic user type, which will be able to create, edit and delete Songs. There will also be a basic auth using email and password. Community features such as ratings and comments won't be in the MVP, neither will versioning.
5. A database will be used for storage (SQLite in the MVP - more on technical aspects later). Entities to consider are: Songs, Instruments, Sheets, Bars and Notes. There won't be any import / export support in the MVP.
6. There are no Monetization goals at the moment.

---------------------------------------------------------------------------------------------------------

Thanks! With that context, here's a high-level outline for the **LlamaJam MVP Product Requirements Document (PRD)**. After reviewing this structure, I can expand any or all sections into full text.

---

## LlamaJam MVP – Product Requirements Document (PRD)

### 1. **Overview**

LlamaJam is a web-based tablature library that enables users to create, edit, and play back song tablatures. It is designed for beginner and amateur musicians seeking to learn songs or share their own arrangements using a simplified notation system.

### 2. **Goals**

* Provide a simple, intuitive interface for creating and editing song tablatures.
* Enable users to play back their creations in-browser with accurate timing.
* Offer basic song discovery and management features.
* Ensure smooth performance for editing and playback, even in complex songs.

### 3. **User Roles**

* **Authenticated User**: Can create, edit, and delete public songs.
* **Visitor**: Can browse and play existing public songs.

### 4. **Core Features**

#### 4.1 Song Management

* Create a new song with title, artist, and difficulty.
* Edit or delete existing songs.
* Songs are public and visible to all users.

#### 4.2 Instrument Setup

* Define instruments as melodic or percussion.
* Specify number of tracks (e.g., 6 for guitar).
* Reusable across Sheets and Songs.

#### 4.3 Sheet Editor

* Add, edit, and delete Sheets associated with a Song and Instrument.
* Configure Bars and add Notes per track.
* Note input via:

  * Drag-and-drop
  * Keyboard shortcuts
  * Copy-paste
* Notes have:

  * Track position
  * Pitch (if melodic)
  * Duration
  * Start time within the bar

#### 4.4 Playback

* Play/Pause functionality using WebAudio API.
* Seek to a specific bar or time.
* Visual follow-along during playback.

#### 4.5 Search

* Search for songs by title, artist, or difficulty.

#### 4.6 Authentication

* Email/password registration and login.
* Authenticated users can manage their own songs.

### 5. **Non-Functional Requirements**

* Web app built with TanStack Start.
* SQLite database for storage during MVP.
* Fast rendering and audio playback even for longer songs.
* Accessibility and scalability deferred post-MVP.

### 6. **Data Model (MVP)**

* **User**: id, email, password hash
* **Song**: id, title, artist, difficulty, userId (owner)
* **Instrument**: id, name, type (melodic/percussion), trackCount
* **Sheet**: id, songId, instrumentId
* **Bar**: id, sheetId, index (position)
* **Note**: id, barId, trackIndex, pitch (nullable for percussion), duration, startTime

### 7. **Out of Scope for MVP**

* Song versioning
* Community features (comments, ratings, likes)
* Instrument presets or sound customization
* Export/import (e.g., MIDI)
* Mobile optimization beyond responsive layout

---

Would you like me to write this up in full prose, or expand any sections first? I can also format this as a collaborative document or markdown if you'd like to iterate on it directly.

---------------------------------------------------------------------------------------------------------

This is great, I'd just like you to consider that Bars must inform their number of beats and the beat duration, then format it as a markdown and include a user stories section

---------------------------------------------------------------------------------------------------------

Here’s the updated **LlamaJam MVP PRD** with a new **User Stories** section included. The stories are written to reflect core use cases for both authenticated users and visitors.

```markdown
# LlamaJam MVP – Product Requirements Document (PRD)

## 1. Overview
LlamaJam is a web-based tablature library that enables users to create, edit, and play back song tablatures. It is designed for beginner and amateur musicians seeking to learn songs or share their own arrangements using a simplified notation system.

## 2. Goals
- Provide a simple, intuitive interface for creating and editing song tablatures.
- Enable users to play back their creations in-browser with accurate timing.
- Offer basic song discovery and management features.
- Ensure smooth performance for editing and playback, even in complex songs.

## 3. User Roles
- **Authenticated User**: Can create, edit, and delete public songs.
- **Visitor**: Can browse and play existing public songs.

## 4. User Stories

### As a Visitor:
- I want to search for a song by title, artist, or difficulty so I can find songs I want to learn.
- I want to view a song’s tablature so I can follow along with it.
- I want to play back a song so I can hear how it should sound.

### As an Authenticated User:
- I want to create a new song so I can add my own tablature.
- I want to define instruments and their track layout so I can represent the instruments in my song accurately.
- I want to add Sheets to a song and associate them with Instruments so I can build up the full arrangement.
- I want to configure Bars in each Sheet with specific time signatures so I can represent the song’s rhythm correctly.
- I want to place Notes using drag-and-drop, keyboard shortcuts, or copy-paste so I can input music quickly and flexibly.
- I want to play and pause the playback so I can test how my song sounds.
- I want to seek to specific bars so I can edit or listen to specific parts of a song.
- I want to edit or delete my songs so I can keep my library organized.
- I want to log in securely with email and password so I can access my songs.

## 5. Core Features

### 5.1 Song Management
- Create a new song with title, artist, and difficulty.
- Edit or delete existing songs.
- Songs are public and visible to all users.

### 5.2 Instrument Setup
- Define instruments as either **melodic** or **percussion**.
- Specify the number of tracks (e.g., 6 for a guitar).
- Instruments are reusable across Sheets and Songs.

### 5.3 Sheet Editor
- Add, edit, and delete Sheets associated with a Song and Instrument.
- Sheets contain a sequence of Bars and define Note placement per track.

#### Notes
- Users can input Notes via:
  - Drag-and-drop
  - Keyboard shortcuts
  - Copy-paste
- Each Note includes:
  - Track index
  - Pitch (for melodic instruments)
  - Duration
  - Start time within the Bar

#### Bars
- Each Bar specifies:
  - **Number of beats** (e.g., 4)
  - **Beat duration** (e.g., quarter note = 1/4)
  - Allows precise time alignment for Notes within the bar

### 5.4 Playback
- Synthetic audio playback using the WebAudio API.
- Controls:
  - Play/Pause
  - Seek to a specific point (click or bar-skip)
- Real-time visual follow-along of Notes as they are played

### 5.5 Search
- Search for songs by:
  - Title
  - Artist
  - Difficulty

### 5.6 Authentication
- Basic email and password registration/login.
- Authenticated users can manage (create/edit/delete) their own songs.

## 6. Non-Functional Requirements
- Web application built using **TanStack Start**.
- Database: **SQLite** for MVP.
- Performance:
  - Optimized rendering of Sheets in-browser
  - Low-latency audio playback
- Accessibility and scalability are **not** priorities for the MVP.

## 7. Data Model (MVP)

### Entities

- **User**
  - `id`
  - `email`
  - `passwordHash`

- **Song**
  - `id`
  - `title`
  - `artist`
  - `difficulty`
  - `userId` (creator)

- **Instrument**
  - `id`
  - `name`
  - `type` (`melodic` | `percussion`)
  - `trackCount`

- **Sheet**
  - `id`
  - `songId`
  - `instrumentId`

- **Bar**
  - `id`
  - `sheetId`
  - `index` (position in sheet)
  - `beatCount` (e.g., 4)
  - `beatDuration` (e.g., 1/4 for quarter note)

- **Note**
  - `id`
  - `barId`
  - `trackIndex`
  - `pitch` (nullable for percussion)
  - `duration`
  - `startTime`

## 8. Out of Scope for MVP
- Song versioning and history
- Comments, ratings, and other community features
- Soundfont customization or instrument presets
- Export/import (e.g., MIDI, MusicXML)
- Advanced accessibility or mobile-specific features
```

Let me know if you'd like to add more stories for future features, define acceptance criteria for these, or export this as a file.

---------------------------------------------------------------------------------------------------------

Thanks, this is just what I needed. As a next step could you please build a technical architecture document?

To elaborate in the technical aspects, here are the technologies I intend to build the system with:
- TanStack Start (React)
  - TanStack Router
  - TanStack Query
  - TanStack Table
  - Vite / Nitro.js
- Shadcn / Radix UI for the UI components
- Zod
- TailwindCSS
- Zustand / immer
- Lucide for icons
- better-sqlite3

Since it uses TanStack Start, which is a full-tack framework, it'll encompass the back-end as well. It will be structured using a layered approach. The entry or top layer will have the Server Function definitions, then there will be a Business layer with the entities and use cases (or services), and a Repository layer which in the MVP will use SQLite.

---------------------------------------------------------------------------------------------------------

see markdown